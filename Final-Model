{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nguyenlamvydat/ai-classification?scriptVersionId=235978291\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"6fbebb59","metadata":{"execution":{"iopub.execute_input":"2025-04-25T03:29:30.157589Z","iopub.status.busy":"2025-04-25T03:29:30.156823Z","iopub.status.idle":"2025-04-25T03:29:38.811859Z","shell.execute_reply":"2025-04-25T03:29:38.811222Z"},"papermill":{"duration":8.660291,"end_time":"2025-04-25T03:29:38.813198","exception":false,"start_time":"2025-04-25T03:29:30.152907","status":"completed"},"tags":[]},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import random_split\n","from torch.utils.data import DataLoader\n","from torchvision import datasets, transforms\n","from torchsummary import summary\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"]},{"cell_type":"code","execution_count":2,"id":"f1f6e2b2","metadata":{"execution":{"iopub.execute_input":"2025-04-25T03:29:38.818766Z","iopub.status.busy":"2025-04-25T03:29:38.818056Z","iopub.status.idle":"2025-04-25T03:39:30.708279Z","shell.execute_reply":"2025-04-25T03:39:30.707228Z"},"papermill":{"duration":591.894393,"end_time":"2025-04-25T03:39:30.709802","exception":false,"start_time":"2025-04-25T03:29:38.815409","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Classes: ['B-FM', 'Barker', 'CPFSK', 'DSB-AM', 'GFSK', 'LFM', 'Rect', 'SSB-AM']\n","Number of classes: 8\n","Training samples: 5120, Validation samples: 1280\n","----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1           [-1, 32, 64, 64]             864\n","       BatchNorm2d-2           [-1, 32, 64, 64]              64\n","              ReLU-3           [-1, 32, 64, 64]               0\n","          Identity-4           [-1, 32, 64, 64]               0\n","            Conv2d-5           [-1, 32, 64, 64]           1,024\n","       BatchNorm2d-6           [-1, 32, 64, 64]              64\n","              ReLU-7           [-1, 32, 64, 64]               0\n","            Conv2d-8           [-1, 32, 64, 64]           4,608\n","       BatchNorm2d-9           [-1, 32, 64, 64]              64\n","             ReLU-10           [-1, 32, 64, 64]               0\n","           Conv2d-11           [-1, 32, 64, 64]           1,024\n","      BatchNorm2d-12           [-1, 32, 64, 64]              64\n","AdaptiveAvgPool2d-13             [-1, 32, 1, 1]               0\n","           Conv2d-14              [-1, 4, 1, 1]             128\n","             ReLU-15              [-1, 4, 1, 1]               0\n","           Conv2d-16             [-1, 32, 1, 1]             128\n","AdaptiveMaxPool2d-17             [-1, 32, 1, 1]               0\n","           Conv2d-18              [-1, 4, 1, 1]             128\n","             ReLU-19              [-1, 4, 1, 1]               0\n","           Conv2d-20             [-1, 32, 1, 1]             128\n"," ChannelAttention-21             [-1, 32, 1, 1]               0\n","           Conv2d-22            [-1, 1, 64, 64]              98\n"," SpatialAttention-23            [-1, 1, 64, 64]               0\n","             CBAM-24           [-1, 32, 64, 64]               0\n","          Dropout-25           [-1, 32, 64, 64]               0\n","     ResidualCBAM-26           [-1, 32, 64, 64]               0\n","         Identity-27           [-1, 32, 64, 64]               0\n","           Conv2d-28           [-1, 32, 64, 64]           1,024\n","      BatchNorm2d-29           [-1, 32, 64, 64]              64\n","             ReLU-30           [-1, 32, 64, 64]               0\n","           Conv2d-31           [-1, 32, 64, 64]           4,608\n","      BatchNorm2d-32           [-1, 32, 64, 64]              64\n","             ReLU-33           [-1, 32, 64, 64]               0\n","           Conv2d-34           [-1, 32, 64, 64]           1,024\n","      BatchNorm2d-35           [-1, 32, 64, 64]              64\n","AdaptiveAvgPool2d-36             [-1, 32, 1, 1]               0\n","           Conv2d-37              [-1, 4, 1, 1]             128\n","             ReLU-38              [-1, 4, 1, 1]               0\n","           Conv2d-39             [-1, 32, 1, 1]             128\n","AdaptiveMaxPool2d-40             [-1, 32, 1, 1]               0\n","           Conv2d-41              [-1, 4, 1, 1]             128\n","             ReLU-42              [-1, 4, 1, 1]               0\n","           Conv2d-43             [-1, 32, 1, 1]             128\n"," ChannelAttention-44             [-1, 32, 1, 1]               0\n","           Conv2d-45            [-1, 1, 64, 64]              98\n"," SpatialAttention-46            [-1, 1, 64, 64]               0\n","             CBAM-47           [-1, 32, 64, 64]               0\n","          Dropout-48           [-1, 32, 64, 64]               0\n","     ResidualCBAM-49           [-1, 32, 64, 64]               0\n","AdaptiveAvgPool2d-50            [-1, 32, 1, 64]               0\n","           Conv2d-51            [-1, 16, 1, 64]           1,536\n","AdaptiveAvgPool2d-52            [-1, 32, 64, 1]               0\n","           Conv2d-53            [-1, 16, 64, 1]           1,536\n","          Sigmoid-54           [-1, 32, 64, 64]               0\n"," MultiScaleModule-55           [-1, 32, 64, 64]               0\n","           Conv2d-56           [-1, 64, 32, 32]           2,048\n","         Identity-57           [-1, 64, 32, 32]               0\n","           Conv2d-58           [-1, 64, 32, 32]           4,096\n","      BatchNorm2d-59           [-1, 64, 32, 32]             128\n","             ReLU-60           [-1, 64, 32, 32]               0\n","           Conv2d-61           [-1, 64, 32, 32]           9,216\n","      BatchNorm2d-62           [-1, 64, 32, 32]             128\n","             ReLU-63           [-1, 64, 32, 32]               0\n","           Conv2d-64           [-1, 64, 32, 32]           4,096\n","      BatchNorm2d-65           [-1, 64, 32, 32]             128\n","AdaptiveAvgPool2d-66             [-1, 64, 1, 1]               0\n","           Conv2d-67              [-1, 8, 1, 1]             512\n","             ReLU-68              [-1, 8, 1, 1]               0\n","           Conv2d-69             [-1, 64, 1, 1]             512\n","AdaptiveMaxPool2d-70             [-1, 64, 1, 1]               0\n","           Conv2d-71              [-1, 8, 1, 1]             512\n","             ReLU-72              [-1, 8, 1, 1]               0\n","           Conv2d-73             [-1, 64, 1, 1]             512\n"," ChannelAttention-74             [-1, 64, 1, 1]               0\n","           Conv2d-75            [-1, 1, 32, 32]              98\n"," SpatialAttention-76            [-1, 1, 32, 32]               0\n","             CBAM-77           [-1, 64, 32, 32]               0\n","          Dropout-78           [-1, 64, 32, 32]               0\n","     ResidualCBAM-79           [-1, 64, 32, 32]               0\n","         Identity-80           [-1, 64, 32, 32]               0\n","           Conv2d-81           [-1, 64, 32, 32]           4,096\n","      BatchNorm2d-82           [-1, 64, 32, 32]             128\n","             ReLU-83           [-1, 64, 32, 32]               0\n","           Conv2d-84           [-1, 64, 32, 32]           9,216\n","      BatchNorm2d-85           [-1, 64, 32, 32]             128\n","             ReLU-86           [-1, 64, 32, 32]               0\n","           Conv2d-87           [-1, 64, 32, 32]           4,096\n","      BatchNorm2d-88           [-1, 64, 32, 32]             128\n","AdaptiveAvgPool2d-89             [-1, 64, 1, 1]               0\n","           Conv2d-90              [-1, 8, 1, 1]             512\n","             ReLU-91              [-1, 8, 1, 1]               0\n","           Conv2d-92             [-1, 64, 1, 1]             512\n","AdaptiveMaxPool2d-93             [-1, 64, 1, 1]               0\n","           Conv2d-94              [-1, 8, 1, 1]             512\n","             ReLU-95              [-1, 8, 1, 1]               0\n","           Conv2d-96             [-1, 64, 1, 1]             512\n"," ChannelAttention-97             [-1, 64, 1, 1]               0\n","           Conv2d-98            [-1, 1, 32, 32]              98\n"," SpatialAttention-99            [-1, 1, 32, 32]               0\n","            CBAM-100           [-1, 64, 32, 32]               0\n","         Dropout-101           [-1, 64, 32, 32]               0\n","    ResidualCBAM-102           [-1, 64, 32, 32]               0\n","AdaptiveAvgPool2d-103            [-1, 64, 1, 32]               0\n","          Conv2d-104            [-1, 32, 1, 32]           6,144\n","AdaptiveAvgPool2d-105            [-1, 64, 32, 1]               0\n","          Conv2d-106            [-1, 32, 32, 1]           6,144\n","         Sigmoid-107           [-1, 64, 32, 32]               0\n","MultiScaleModule-108           [-1, 64, 32, 32]               0\n","          Conv2d-109          [-1, 128, 16, 16]           8,192\n","        Identity-110          [-1, 128, 16, 16]               0\n","          Conv2d-111          [-1, 128, 16, 16]          16,384\n","     BatchNorm2d-112          [-1, 128, 16, 16]             256\n","            ReLU-113          [-1, 128, 16, 16]               0\n","          Conv2d-114          [-1, 128, 16, 16]          18,432\n","     BatchNorm2d-115          [-1, 128, 16, 16]             256\n","            ReLU-116          [-1, 128, 16, 16]               0\n","          Conv2d-117          [-1, 128, 16, 16]          16,384\n","     BatchNorm2d-118          [-1, 128, 16, 16]             256\n","AdaptiveAvgPool2d-119            [-1, 128, 1, 1]               0\n","          Conv2d-120             [-1, 16, 1, 1]           2,048\n","            ReLU-121             [-1, 16, 1, 1]               0\n","          Conv2d-122            [-1, 128, 1, 1]           2,048\n","AdaptiveMaxPool2d-123            [-1, 128, 1, 1]               0\n","          Conv2d-124             [-1, 16, 1, 1]           2,048\n","            ReLU-125             [-1, 16, 1, 1]               0\n","          Conv2d-126            [-1, 128, 1, 1]           2,048\n","ChannelAttention-127            [-1, 128, 1, 1]               0\n","          Conv2d-128            [-1, 1, 16, 16]              98\n","SpatialAttention-129            [-1, 1, 16, 16]               0\n","            CBAM-130          [-1, 128, 16, 16]               0\n","         Dropout-131          [-1, 128, 16, 16]               0\n","    ResidualCBAM-132          [-1, 128, 16, 16]               0\n","        Identity-133          [-1, 128, 16, 16]               0\n","          Conv2d-134          [-1, 128, 16, 16]          16,384\n","     BatchNorm2d-135          [-1, 128, 16, 16]             256\n","            ReLU-136          [-1, 128, 16, 16]               0\n","          Conv2d-137          [-1, 128, 16, 16]          18,432\n","     BatchNorm2d-138          [-1, 128, 16, 16]             256\n","            ReLU-139          [-1, 128, 16, 16]               0\n","          Conv2d-140          [-1, 128, 16, 16]          16,384\n","     BatchNorm2d-141          [-1, 128, 16, 16]             256\n","AdaptiveAvgPool2d-142            [-1, 128, 1, 1]               0\n","          Conv2d-143             [-1, 16, 1, 1]           2,048\n","            ReLU-144             [-1, 16, 1, 1]               0\n","          Conv2d-145            [-1, 128, 1, 1]           2,048\n","AdaptiveMaxPool2d-146            [-1, 128, 1, 1]               0\n","          Conv2d-147             [-1, 16, 1, 1]           2,048\n","            ReLU-148             [-1, 16, 1, 1]               0\n","          Conv2d-149            [-1, 128, 1, 1]           2,048\n","ChannelAttention-150            [-1, 128, 1, 1]               0\n","          Conv2d-151            [-1, 1, 16, 16]              98\n","SpatialAttention-152            [-1, 1, 16, 16]               0\n","            CBAM-153          [-1, 128, 16, 16]               0\n","         Dropout-154          [-1, 128, 16, 16]               0\n","    ResidualCBAM-155          [-1, 128, 16, 16]               0\n","AdaptiveAvgPool2d-156           [-1, 128, 1, 16]               0\n","          Conv2d-157            [-1, 64, 1, 16]          24,576\n","AdaptiveAvgPool2d-158           [-1, 128, 16, 1]               0\n","          Conv2d-159            [-1, 64, 16, 1]          24,576\n","         Sigmoid-160          [-1, 128, 16, 16]               0\n","MultiScaleModule-161          [-1, 128, 16, 16]               0\n","AdaptiveAvgPool2d-162            [-1, 128, 1, 1]               0\n","          Linear-163                   [-1, 64]           8,256\n","            ReLU-164                   [-1, 64]               0\n","         Dropout-165                   [-1, 64]               0\n","          Linear-166                    [-1, 8]             520\n","================================================================\n","Total params: 259,764\n","Trainable params: 259,764\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.19\n","Forward/backward pass size (MB): 49.58\n","Params size (MB): 0.99\n","Estimated Total Size (MB): 50.75\n","----------------------------------------------------------------\n","Epoch 1/100 - Train Loss: 1.3916, Train Acc: 0.4344 - Val Loss: 1.0264, Val Acc: 0.5414 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 1 with Val Acc: 0.5414\n","\t\t\t---------------------------------------------------------\n","Epoch 2/100 - Train Loss: 0.8049, Train Acc: 0.6611 - Val Loss: 1.2218, Val Acc: 0.5414 - LR: 0.000500\n","Epoch 3/100 - Train Loss: 0.6233, Train Acc: 0.7344 - Val Loss: 0.4872, Val Acc: 0.7812 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 3 with Val Acc: 0.7812\n","\t\t\t---------------------------------------------------------\n","Epoch 4/100 - Train Loss: 0.5162, Train Acc: 0.7701 - Val Loss: 0.8036, Val Acc: 0.6625 - LR: 0.000500\n","Epoch 5/100 - Train Loss: 0.4508, Train Acc: 0.7895 - Val Loss: 0.4088, Val Acc: 0.8063 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 5 with Val Acc: 0.8063\n","\t\t\t---------------------------------------------------------\n","Epoch 6/100 - Train Loss: 0.4098, Train Acc: 0.7998 - Val Loss: 0.4115, Val Acc: 0.7977 - LR: 0.000500\n","Epoch 7/100 - Train Loss: 0.3825, Train Acc: 0.8164 - Val Loss: 0.2894, Val Acc: 0.8453 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 7 with Val Acc: 0.8453\n","\t\t\t---------------------------------------------------------\n","Epoch 8/100 - Train Loss: 0.3494, Train Acc: 0.8330 - Val Loss: 0.6049, Val Acc: 0.7609 - LR: 0.000500\n","Epoch 9/100 - Train Loss: 0.3617, Train Acc: 0.8236 - Val Loss: 0.2966, Val Acc: 0.8445 - LR: 0.000500\n","Epoch 10/100 - Train Loss: 0.3324, Train Acc: 0.8344 - Val Loss: 0.2867, Val Acc: 0.8461 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 10 with Val Acc: 0.8461\n","\t\t\t---------------------------------------------------------\n","Epoch 11/100 - Train Loss: 0.3168, Train Acc: 0.8277 - Val Loss: 0.3073, Val Acc: 0.8328 - LR: 0.000500\n","Epoch 12/100 - Train Loss: 0.3067, Train Acc: 0.8385 - Val Loss: 0.2654, Val Acc: 0.8547 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 12 with Val Acc: 0.8547\n","\t\t\t---------------------------------------------------------\n","Epoch 13/100 - Train Loss: 0.3226, Train Acc: 0.8385 - Val Loss: 0.2586, Val Acc: 0.8500 - LR: 0.000500\n","Epoch 14/100 - Train Loss: 0.3173, Train Acc: 0.8404 - Val Loss: 0.3462, Val Acc: 0.8234 - LR: 0.000500\n","Epoch 15/100 - Train Loss: 0.2808, Train Acc: 0.8555 - Val Loss: 0.4059, Val Acc: 0.8187 - LR: 0.000500\n","Epoch 16/100 - Train Loss: 0.2916, Train Acc: 0.8574 - Val Loss: 0.3139, Val Acc: 0.8398 - LR: 0.000500\n","Epoch 17/100 - Train Loss: 0.2863, Train Acc: 0.8564 - Val Loss: 0.2937, Val Acc: 0.8547 - LR: 0.000500\n","Epoch 18/100 - Train Loss: 0.2955, Train Acc: 0.8471 - Val Loss: 0.3078, Val Acc: 0.8484 - LR: 0.000500\n","Epoch 19/100 - Train Loss: 0.2811, Train Acc: 0.8545 - Val Loss: 0.2587, Val Acc: 0.8602 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 19 with Val Acc: 0.8602\n","\t\t\t---------------------------------------------------------\n","Epoch 20/100 - Train Loss: 0.2815, Train Acc: 0.8562 - Val Loss: 0.2542, Val Acc: 0.8469 - LR: 0.000500\n","Epoch 21/100 - Train Loss: 0.2653, Train Acc: 0.8619 - Val Loss: 0.2434, Val Acc: 0.8680 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 21 with Val Acc: 0.8680\n","\t\t\t---------------------------------------------------------\n","Epoch 22/100 - Train Loss: 0.2592, Train Acc: 0.8674 - Val Loss: 0.2438, Val Acc: 0.8602 - LR: 0.000500\n","Epoch 23/100 - Train Loss: 0.2417, Train Acc: 0.8752 - Val Loss: 0.2881, Val Acc: 0.8500 - LR: 0.000500\n","Epoch 24/100 - Train Loss: 0.2356, Train Acc: 0.8744 - Val Loss: 0.2481, Val Acc: 0.8594 - LR: 0.000500\n","Epoch 25/100 - Train Loss: 0.2458, Train Acc: 0.8770 - Val Loss: 0.2649, Val Acc: 0.8664 - LR: 0.000500\n","Epoch 26/100 - Train Loss: 0.2320, Train Acc: 0.8801 - Val Loss: 0.2342, Val Acc: 0.8664 - LR: 0.000500\n","Epoch 27/100 - Train Loss: 0.2367, Train Acc: 0.8773 - Val Loss: 0.2939, Val Acc: 0.8477 - LR: 0.000500\n","Epoch 28/100 - Train Loss: 0.2318, Train Acc: 0.8791 - Val Loss: 0.2727, Val Acc: 0.8680 - LR: 0.000500\n","Epoch 29/100 - Train Loss: 0.2187, Train Acc: 0.8789 - Val Loss: 0.2449, Val Acc: 0.8656 - LR: 0.000500\n","Epoch 30/100 - Train Loss: 0.2373, Train Acc: 0.8746 - Val Loss: 0.2469, Val Acc: 0.8562 - LR: 0.000500\n","Epoch 31/100 - Train Loss: 0.2285, Train Acc: 0.8797 - Val Loss: 0.2468, Val Acc: 0.8695 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 31 with Val Acc: 0.8695\n","\t\t\t---------------------------------------------------------\n","Epoch 32/100 - Train Loss: 0.2302, Train Acc: 0.8822 - Val Loss: 0.2332, Val Acc: 0.8805 - LR: 0.000500\n","\t\t\t---------------------------------------------------------\n","\t\t\t Saved best model at epoch 32 with Val Acc: 0.8805\n","\t\t\t---------------------------------------------------------\n","Epoch 33/100 - Train Loss: 0.2206, Train Acc: 0.8846 - Val Loss: 0.3914, Val Acc: 0.8258 - LR: 0.000500\n","Epoch 34/100 - Train Loss: 0.2354, Train Acc: 0.8824 - Val Loss: 0.3443, Val Acc: 0.8453 - LR: 0.000500\n","Epoch 35/100 - Train Loss: 0.2019, Train Acc: 0.8959 - Val Loss: 0.2544, Val Acc: 0.8703 - LR: 0.000500\n","Epoch 36/100 - Train Loss: 0.2012, Train Acc: 0.8873 - Val Loss: 0.2451, Val Acc: 0.8719 - LR: 0.000500\n","Epoch 37/100 - Train Loss: 0.2188, Train Acc: 0.8865 - Val Loss: 0.2629, Val Acc: 0.8547 - LR: 0.000500\n","Epoch 38/100 - Train Loss: 0.2163, Train Acc: 0.8938 - Val Loss: 0.2326, Val Acc: 0.8758 - LR: 0.000500\n","Epoch 39/100 - Train Loss: 0.1896, Train Acc: 0.9047 - Val Loss: 0.2301, Val Acc: 0.8672 - LR: 0.000500\n","Epoch 40/100 - Train Loss: 0.1849, Train Acc: 0.9027 - Val Loss: 0.2535, Val Acc: 0.8742 - LR: 0.000500\n","Epoch 41/100 - Train Loss: 0.1826, Train Acc: 0.9049 - Val Loss: 0.2636, Val Acc: 0.8641 - LR: 0.000500\n","Epoch 42/100 - Train Loss: 0.2149, Train Acc: 0.8918 - Val Loss: 0.2392, Val Acc: 0.8656 - LR: 0.000500\n","Early stopping triggered after 42 epochs with no improvement in Val Acc.\n","Training completed. Best model save!\n"]}],"source":["#Data Processing\n","training_path = '/kaggle/input/radar-signal-classification/training_set'\n","\n","transforms = transforms.Compose([\n","    transforms.Resize((128, 128)),\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5,), (0.5,))\n","])\n","full_dataset = datasets.ImageFolder(root=training_path, transform=transforms)\n","\n","# 80% data train, 20% valdilation\n","train_size = int(0.8 * len(full_dataset))\n","val_size = len(full_dataset) - train_size\n","train_data, val_data = random_split(full_dataset, [train_size, val_size])\n","\n","train_loader = DataLoader(train_data, batch_size=32, shuffle=True, num_workers=2)\n","val_loader = DataLoader(val_data, batch_size=32, shuffle=False, num_workers=2)\n","\n","class_names = train_data.dataset.classes\n","num_classes = len(class_names)\n","\n","print(f\"Classes: {class_names}\")\n","print(f\"Number of classes: {num_classes}\")\n","print(f\"Training samples: {train_size}, Validation samples: {val_size}\")\n","\n","#Build Neural Network\n","class ChannelAttention(nn.Module):\n","    def __init__(self, in_channels, reduction_ratio=16):\n","        super(ChannelAttention, self).__init__()\n","        self.avg_pool = nn.AdaptiveAvgPool2d(1)\n","        self.max_pool = nn.AdaptiveMaxPool2d(1)\n","        \n","        self.fc = nn.Sequential(\n","            nn.Conv2d(in_channels, in_channels // reduction_ratio, kernel_size=1, bias=False),\n","            nn.ReLU(inplace=True),\n","            nn.Conv2d(in_channels // reduction_ratio, in_channels, kernel_size=1, bias=False)\n","        )\n","        \n","    def forward(self, x):\n","        avg_out = self.fc(self.avg_pool(x))\n","        max_out = self.fc(self.max_pool(x))\n","        out = avg_out + max_out\n","        return torch.sigmoid(out)\n","\n","\n","class SpatialAttention(nn.Module):\n","    def __init__(self, kernel_size=7):\n","        super(SpatialAttention, self).__init__()\n","        self.conv = nn.Conv2d(2, 1, kernel_size=kernel_size, padding=kernel_size//2, bias=False)\n","        \n","    def forward(self, x):\n","        avg_out = torch.mean(x, dim=1, keepdim=True)\n","        max_out, _ = torch.max(x, dim=1, keepdim=True)\n","        x_cat = torch.cat([avg_out, max_out], dim=1)\n","        out = self.conv(x_cat)\n","        return torch.sigmoid(out)\n","\n","        \n","class CBAM(nn.Module):\n","    def __init__(self, in_channels, reduction_ratio=16, kernel_size=7):\n","        super(CBAM, self).__init__()\n","        self.channel_attention = ChannelAttention(in_channels, reduction_ratio)\n","        self.spatial_attention = SpatialAttention(kernel_size)\n","        \n","    def forward(self, x):\n","        \n","        channel_att = self.channel_attention(x)\n","        x = x * channel_att\n","\n","        spatial_att = self.spatial_attention(x)\n","        x = x * spatial_att\n","\n","        return x\n","\n","        \n","class ConvBlock(nn.Module):\n","    def __init__(self, in_channels, out_channels, groups=1, stride=1):\n","        super(ConvBlock, self).__init__()\n","        self.block = nn.Sequential(\n","            nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False),\n","            nn.BatchNorm2d(out_channels),\n","            nn.ReLU(inplace=True),\n","            nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=stride, padding=1, groups=groups, bias=False),\n","            nn.BatchNorm2d(out_channels),\n","            nn.ReLU(inplace=True)\n","        )\n","        \n","    def forward(self, x):\n","        return self.block(x)\n","\n","        \n","class ResidualCBAM(nn.Module):\n","    def __init__(self, in_channels, out_channels, groups=1, stride=1):\n","        super(ResidualCBAM, self).__init__()\n","        self.stride = stride\n","        \n","        self.conv_block = nn.Sequential(\n","            nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False),\n","            nn.BatchNorm2d(out_channels),\n","            nn.ReLU(inplace=True),\n","            nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=stride, padding=1, groups=groups, bias=False),\n","            nn.BatchNorm2d(out_channels),\n","            nn.ReLU(inplace=True),\n","            nn.Conv2d(out_channels, out_channels, kernel_size=1, bias=False),\n","            nn.BatchNorm2d(out_channels)\n","        )\n","        self.dropout = nn.Dropout(0.3)\n","        self.cbam = CBAM(out_channels, reduction_ratio=8)\n","\n","        if stride != 1 or in_channels != out_channels:\n","            self.shortcut = nn.Sequential(\n","                nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),\n","                nn.BatchNorm2d(out_channels)\n","            )\n","        else:\n","            self.shortcut = nn.Identity()\n","\n","        \n","    def forward(self, x):\n","        ResidualCBAM = self.shortcut(x)\n","        x = self.conv_block(x)\n","        x = self.cbam(x)\n","        x = self.dropout(x)\n","        x += ResidualCBAM\n","        return F.relu(x)\n","\n","\n","class MultiScaleModule(nn.Module):\n","    def __init__(self, in_channels, out_channels):\n","        super(MultiScaleModule, self).__init__()\n","\n","        self.h_pool = nn.AdaptiveAvgPool2d((1, None))\n","        self.h_conv = nn.Conv2d(in_channels, out_channels//2, kernel_size=(1, 3), padding=(0, 1), bias=False)\n","        \n","        self.v_pool = nn.AdaptiveAvgPool2d((None, 1))\n","        self.v_conv = nn.Conv2d(in_channels, out_channels//2, kernel_size=(3, 1), padding=(1, 0), bias=False)\n","        \n","        self.sigmoid = nn.Sigmoid()\n","        \n","    def forward(self, x):\n","        h_att = self.h_conv(self.h_pool(x))\n","        v_att = self.v_conv(self.v_pool(x))\n","        \n","        h_att = F.interpolate(h_att, size=x.size()[2:], mode='bilinear', align_corners=False)\n","        v_att = F.interpolate(v_att, size=x.size()[2:], mode='bilinear', align_corners=False)\n","        \n","        attention = torch.cat([h_att, v_att], dim=1)\n","        attention = self.sigmoid(attention)\n","        \n","        return x * attention\n","\n","class RadarSignalNW(nn.Module):\n","    def __init__(self, in_channels=3, num_classes=8):\n","        super(RadarSignalNW, self).__init__()\n","        \n","        self.conv1 = nn.Conv2d(in_channels, 32, kernel_size=3, stride=2, padding=1, bias=False)\n","        self.bn1 = nn.BatchNorm2d(32)\n","        self.relu = nn.ReLU(inplace=True)\n","        \n","        # 64x64\n","        self.Block1 = nn.Sequential(\n","            ResidualCBAM(32, 32, groups=2),\n","            ResidualCBAM(32, 32, groups=2)\n","        )\n","        self.msm1 = MultiScaleModule(32, 32)\n","        self.transition1 = nn.Conv2d(32, 64, kernel_size=1, stride=2, bias=False)\n","        \n","        # 32x32\n","        self.Block2 = nn.Sequential(\n","            ResidualCBAM(64, 64, groups=4),\n","            ResidualCBAM(64, 64, groups=4)\n","        )\n","        self.msm2 = MultiScaleModule(64, 64)\n","        self.transition2 = nn.Conv2d(64, 128, kernel_size=1, stride=2, bias=False)\n","        \n","        # 16x16\n","        self.Block3 = nn.Sequential(\n","            ResidualCBAM(128, 128, groups=8),\n","            ResidualCBAM(128, 128, groups=8)\n","        )\n","        self.msm3 = MultiScaleModule(128, 128)\n","        \n","  \n","        self.global_pool = nn.AdaptiveAvgPool2d(1)\n","        self.fc1 = nn.Linear(128, 64)\n","        self.dropout = nn.Dropout(0.3)\n","        self.fc2 = nn.Linear(64, num_classes)\n","    \n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.bn1(x)\n","        x = self.relu(x)\n","\n","        x = self.Block1(x)\n","        x = self.msm1(x)\n","        x = self.transition1(x)\n","        \n","        x = self.Block2(x)\n","        x = self.msm2(x)\n","        x = self.transition2(x)\n","       \n","        x = self.Block3(x)\n","        x = self.msm3(x)\n","        \n","        x = self.global_pool(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.fc1(x)\n","        x = self.relu(x)\n","        x = self.dropout(x)\n","        x = self.fc2(x)\n","        \n","        return x\n","    \n","model = RadarSignalNW(num_classes=8).to(device)\n","criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.0005, weight_decay=1e-4)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.2, patience=10)\n","summary(model, input_size=(3, 128, 128))\n","\n","def train(model, train_loader, val_loader, optimizer, criterion, scheduler, epochs, device, early_stopping_patience=10):\n","    train_loss, val_loss, train_acc, val_acc = [], [], [], []\n","    \n","    save_path = \"/kaggle/working/22139012_22139015.pt\"\n","    \n","    best_val_acc = 0.0\n","    best_val_loss = float('inf')\n","    epochs_no_improve = 0\n","    \n","    for epoch in range(epochs):\n","        model.train()\n","        running_loss, correct, total = 0.0, 0, 0\n","        for batch_idx, (images, labels) in enumerate(train_loader):\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","            \n","            running_loss += loss.item()\n","            _, predicted = torch.max(outputs, 1)\n","            correct += (predicted == labels).sum().item()\n","            total += labels.size(0)\n","        \n","        epoch_train_loss = running_loss / len(train_loader)\n","        epoch_train_acc = correct / total\n","        train_loss.append(epoch_train_loss)\n","        train_acc.append(epoch_train_acc)\n","        \n","        model.eval()\n","        val_running_loss, correct, total = 0.0, 0, 0\n","        with torch.no_grad():\n","            for images, labels in val_loader:\n","                images, labels = images.to(device), labels.to(device)\n","                outputs = model(images)\n","                loss = criterion(outputs, labels)\n","                val_running_loss += loss.item()\n","                _, predicted = torch.max(outputs, 1)\n","                correct += (predicted == labels).sum().item()\n","                total += labels.size(0)\n","        \n","        epoch_val_loss = val_running_loss / len(val_loader)\n","        epoch_val_acc = correct / total\n","        val_loss.append(epoch_val_loss)\n","        val_acc.append(epoch_val_acc)\n","        \n","        scheduler.step(epoch_val_loss)\n","        \n","        current_lr = optimizer.param_groups[0]['lr']\n","        print(f\"Epoch {epoch+1}/{epochs} - \"\n","              f\"Train Loss: {epoch_train_loss:.4f}, Train Acc: {epoch_train_acc:.4f} - \"\n","              f\"Val Loss: {epoch_val_loss:.4f}, Val Acc: {epoch_val_acc:.4f} - \"\n","              f\"LR: {current_lr:.6f}\")\n","        \n","        if epoch_val_acc > best_val_acc:\n","            best_val_acc = epoch_val_acc\n","            best_val_loss = epoch_val_loss\n","            example_input = torch.randn(1, 3, 128, 128).to(device) \n","            traced_model = torch.jit.trace(model, example_input)\n","            traced_model.save(save_path)\n","            print('\\t\\t\\t---------------------------------------------------------')\n","            print(f\"\\t\\t\\t Saved best model at epoch {epoch+1} with Val Acc: {best_val_acc:.4f}\")\n","            print('\\t\\t\\t---------------------------------------------------------')\n","            epochs_no_improve = 0\n","        else:\n","            epochs_no_improve += 1\n","        \n","        if epochs_no_improve >= early_stopping_patience:\n","            print(f\"Early stopping triggered after {epoch+1} epochs with no improvement in Val Acc.\")\n","            break\n","    \n","    return model, train_loss, train_acc, val_loss, val_acc, epoch+1\n","\n","epochs = 100\n","model, train_loss, train_acc, val_loss, val_acc, stop_ep = train(model, train_loader, val_loader, optimizer, criterion, scheduler, epochs, device, early_stopping_patience=10)\n","\n","print(\"Training completed. Best model save!\")"]},{"cell_type":"code","execution_count":3,"id":"efe31e70","metadata":{"execution":{"iopub.execute_input":"2025-04-25T03:39:30.719261Z","iopub.status.busy":"2025-04-25T03:39:30.719004Z","iopub.status.idle":"2025-04-25T03:39:31.079975Z","shell.execute_reply":"2025-04-25T03:39:31.079145Z"},"papermill":{"duration":0.367196,"end_time":"2025-04-25T03:39:31.081325","exception":false,"start_time":"2025-04-25T03:39:30.714129","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"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PgDKpEmTDPZt0KCB0rBhQ939NWvWKACUadOm6balp6crzzzzjAJAmT9/fp5levLJJ5WyZcsqGRkZum1btmxRACjfffed7pgpKSkGz7t//74SEBCgvPbaawbbASjjx4/X3Z8/f74CQLl48aKiKIoSExOjODs7K126dFE0Go1uvw8++EABoPTv31+3LTk52aBciiI/axcXF4P35p9//snx9T5eV7Tv2ZQpUwz2e+GFFxSVSmVQB4ytF9nR1snp06fnuM+sWbMUAMrixYt121JTU5WmTZsqnp6eSlxcnKIoijJ8+HDF29tbSU9Pz/FYoaGhSpcuXXItExGRJbGrHhGRBbi4uGDAgAFZtru5uelux8fH486dO3jmmWeQlJSE06dP53ncXr16oWTJkrr72taHCxcu5Pnctm3bonLlyrr79erVg7e3t+65GRkZ+P3339GtWzcEBwfr9qtSpQo6deqU5/EBw9eXmJiIO3fuoFmzZlAUBUeOHMmy/8CBAw3uP/PMMwavZdOmTXB0dNS1QAEypmjYsGFGlQeQcWnXrl3Drl27dNuWLFkCZ2dnvPjii7pjOjs7AwA0Gg3u3buH9PR0NGrUKNtufrn5/fffkZqaimHDhhl0bxwxYkSWfV1cXKBWy7/ijIwM3L17F56enqhevXq+z6u1adMmODg44O233zbYPnLkSCiKgs2bNxtsz6teFMSmTZsQGBiI3r1767Y5OTnh7bffRkJCAnbu3AkA8PHxQWJiYq7d7nx8fHDixAmcO3euwOUiIjIFgxMRkQWUKVNG90E8sxMnTqB79+4oUaIEvL294efnp5tY4sGDB3ket1y5cgb3tSHq/v37+X6u9vna58bExODhw4eoUqVKlv2y25adK1euIDw8HKVKldKNW2rZsiWArK/P1dU1SxfAzOUBgMuXLyMoKAienp4G+1WvXt2o8gDAyy+/DAcHByxZsgQAkJycjNWrV6NTp04GIXThwoWoV6+ebvyMn58fNm7caNTPJbPLly8DAKpWrWqw3c/Pz+B8gIS0mTNnomrVqnBxcYGvry/8/Pxw7NixfJ838/mDg4Ph5eVlsF0706O2fFp51YuCuHz5MqpWraoLhzmVZfDgwahWrRo6deqEsmXL4rXXXssyzmrSpEmIjY1FtWrVULduXbz77rs2P408ERUtDE5ERBaQueVFKzY2Fi1btsTR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V9OmTbF9+3aDbZGRkWjatKmVSlS4OLMeEREREZF1WDU4JSQkICoqClFRUQBkuvGoqChcuXIFgHSz69evn27/gQMH4sKFC3jvvfdw+vRpzJkzB7/99hveeecdaxS/0GmD082bRuzMmfWIiIiIiMzGqsHp4MGDaNCgARo0aAAAiIiIQIMGDTBu3DgAwM2bN3UhCgAqVqyIjRs3IjIyEqGhofjiiy/www8/FPmpyLW4CC4RERERkXVYdYxTq1atoCg5T3KwYMGCbJ9z5MgRC5bKdrGrHhERERGRddjVGKfiji1ORERERETWweBkR0wKThzjRERERERUYAxOdkQbnO7eBVJS8tiZLU5ERERERGbD4GRHSpYEtEtS5TmzHsc4ERERERGZDYOTHVGpgKAguZ1ndz121SMiIiIiMhsGJztj9DinzF31cpm5kIiIiIiI8sbgZGeMDk7arnrJyUBiokXLRERERERU1DE42RltcMpzjJOHB+DqKrfZXY+IiIiIqEAYnOyM0S1OKhVn1iMiIiIiMhMGJzuTr7WcOLMeEREREZFZMDjZGS6CS0RERERU+Bic7IxJwYktTkREREREBcLgZGe0wSk2FkhKymNndtUjIiIiIjILBic74+0NuLnJ7Txn1mNXPSIiIiIis2BwsjMqlYmL4BIRERERkckYnOxQvhfBZXAiIiIiIioQBic7xBYnIiIiIqLCxeBkh7TBiWOciIiIiIgKB4OTHcp3i1NsLJCWZskiEREREREVaQxOdsjo4FSyJKB+9CNmqxMRERERkckYnOyQ0cFJrQZKl5bbDE5ERERERCZjcLJDRgcngBNEEBERERGZAYOTHQoKkuv4eLnkilOSExEREREVGIOTHfLyAjw95TZn1iMiIiIisjwGJzvFtZyIiIiIiAoPg5OdMjo4saseEREREVGBMTjZqXy3OLGrHhERERGRyRic7JQ2OBk9xoktTkREREREJmNwslPsqkdEREREVHgYnOwUu+oRERERERUeBic7ZVJwUhSLlomIiIiIqKhicLJTmYNTrnlI21UvPR2IjbV0sYiIiIiIiiQGJzsVFCTXSUlAXFwuO7q4yIq5AMc5ERERERGZiMHJTrm7AyVKyG2OcyIiIiIisiwGJzvGmfWIiIiIiAoHg5Mdy/cEEQxOREREREQmYXCyY5ySnIiIiIiocDA42TFtcLp5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wIEDMs6JwYmIiIiIigiTuuppNBpMmjQJJUqUQPny5VG+fHn4+Phg8uTJ0Giynw6bLE/bXW/Fijy66925Y94Ta4NT/fpAtWpym+OciIiIiKgIManF6cMPP8SPP/6ITz/9FM0fTeG2Z88eTJgwAcnJyew6ZyWdOknL08WLkmWyDDfz85OWIHNPEJE5ON2/L7c5sx4RERERFSEmBaeFCxfihx9+wPPPP6/bVq9ePZQpUwaDBw9mcLISDw8JT6tWSatTluBkiZn1bt8Grl+X2/Xq6W+zxYmIiIiIihCTuurdu3cPNWrUyLK9Ro0auHfvXoELRabLtbueJdZy0k5DXqUK4OUFVK8u99niRERERERFiEnBKTQ0FF9//XWW7V9//TXq1atX4EKR6bp0kXWdzp4FTpx47EFLjHHK3E0PkAAFAHfvyoWIiIiIqAgwqavetGnT0KVLF/z++++6NZz27duHq1evYtOmTWYtIOWPt7dMTb5+vbQ61amT6UFLdNV7PDh5eAAhITIv+tmzQA6LGRMRERER2ROTWpxatmyJs2fPonv37oiNjUVsbCx69OiBEydO4OeffzZ3GSmfMi+Ga8ASXfUeD04AZ9YjIiIioiLH5HWcgoODs0wCcfToUfz444/4/vvvC1wwMl1YGODkBPz7L3D6NKAbjmburnoPH8oJAMPgVL06sH07xzkRERERUZFhUosT2baSJYE2beS2QauTubvqnTgBZGTIcYOD9dvZ4kRERERERQyDUxGVbXe9zF31sl0hN58yd9NTqfTbObMeERERERUxDE5FVNeugIMDcOQI8N9/jzZqg1NaGhAfX/CTZDe+CdC3OJ07B2g0BT8PEREREZGV5WuMU48ePXJ9PDY2tiBlITPy9QVatZKhRitXAu+9B8DNTWa9S0yUVidv74KdJKfgVL484OwMpKQAV64AFSoU7DxERERERFaWrxanEiVK5HopX748+vXrZ6myUj5l213PXOOcNBr94rePBycHB/16ThznRERERERFQL5anObPn2+pcpAFdO8ODB4MHDgAXL4sDUHw85M7BZ1Z78IFICEBcHXVj2nKrFo14ORJGefUvn3BzkVEREREZGUc41SEBQQAzzwjt1eterTRXGs5abvp1a0LOGaTv7Vhii1ORERERFQEMDgVcVm665mrq15O45u0tBNEcGY9IiIiIioCGJyK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YHAykYuLC8aPHw8XFxdrF4UoT6yvZE9YX8mesL6SPWF9LZhiNzkEERERERFRfrHFiYiIiIiIKA8MTkRERERERHlgcCIiIiIiIsoDgxMREREREVEeGJxM9M0336BChQpwdXVFkyZNcODAAWsXiQi7du1CWFgYgoODoVKpsGbNGoPHFUXBuHHjEBQUBDc3N7Rt2xbnzp2zTmGpWJs6dSqefPJJeHl5wd/fH926dcOZM2cM9klOTsaQIUNQunRpeHp6omfPnrh165aVSkzF2bfffot69erpFg1t2rQpNm/erHucdZVs2aeffgqVSoURI0botrHOmobByQTLli1DREQExo8fj8OHDyM0NBQdOnRATEyMtYtGxVxiYiJCQ0PxzTffZPv4tGnT8NVXX2Hu3LnYv38/PDw80KFDByQnJxdySam427lzJ4YMGYK///4bkZGRSEtLQ/v27ZGYmKjb55133sH69euxfPly7Ny5Ezdu3ECPHj2sWGoqrsqWLYtPP/0Uhw4dwsGDB/Hss8+ia9euOHHiBADWVbJd//zzD7777jvUq1fPYDvrrIkUyrfGjRsrQ4YM0d3PyMhQgoODlalTp1qxVESGACirV6/W3ddoNEpgYKAyffp03bbY2FjFxcVFWbp0qRVKSKQXExOjAFB27typKIrUTScnJ2X58uW6fU6dOqUAUPbt22etYhLplCxZUvnhhx9YV8lmxcfHK1WrVlUiIyOVli1bKsOHD1cUhX9fC4ItTvmUmpqKQ4cOoW3btrptarUabdu2xb59+6xYMqLcXbx4EdHR0QZ1t0SJEmjSpAnrLlndgwcPAAClSpUCABw6dAhpaWkG9bVGjRooV64c6ytZVUZGBn799VckJiaiadOmrKtks4YMGYIuXboY1E2Af18LwtHaBbA3d+7cQUZGBgICAgy2BwQE4PTp01YqFVHeoqOjASDbuqt9jMgaNBoNRowYgebNm6NOnToApL46OzvDx8fHYF/WV7KW48ePo2nTpkhOToanpydWr16NWrVqISoqinWVbM6vv/6Kw4cP459//snyGP++mo7BiYiIrGrIkCH4999/sWfPHmsXhShH1atXR1RUFB48eIAVK1agf//+2Llzp7WLRZTF1atXMXz4cERGRsLV1dXaxSlS2FUvn3x9feHg4JBl5pFbt24hMDDQSqUiypu2frLuki0ZOnQoNmzYgD///BNly5bVbQ8MDERqaipiY2MN9md9JWtxdnZGlSpV0LBhQ0ydOhWhoaH48ssvWVfJ5hw6dAgxMTF44okn4OjoCEdHR+zcuRNfffUVHB0dERAQwDprIganfHJ2dkbDhg2xfft23TaNRoPt27ejadOmViwZUe4qVqyIwMBAg7obFxeH/fv3s+5SoVMUBUOHDsXq1avxxx9/oGLFigaPN2zYEE5OTgb19cyZM7hy5QrrK9kEjUaDlJQU1lWyOW3atMHx48cRFRWluzRq1Ah9+/bV3WadNQ276pkgIiIC/fv3R6NGjdC4cWPMmjULiYmJGDBggLWLRsVcQkICzp8/r7t/8eJFREVFoVSpUihXrhxGjBiBKVOmoGrVqqhYsSLGjh2L4OBgdOvWzXqFpmJpyJAhWLJkCdauXQsvLy9dv/oSJUrAzc0NJUqUwOuvv46IiAiUKlUK3t7eGDZsGJo2bYqnnnrKyqWn4mbMmDHo1KkTypUrh/j4eCxZsgQ7duzA1q1bWVfJ5nh5eenGi2p5eHigdOnSuu2ss6ZhcDJBr169cPv2bYwbNw7R0dGoX78+tmzZkmXQPVFhO3jwIFq3bq27HxERAQDo378/FixYgPfeew+JiYl46623EBsbi6effhpbtmxhH2gqdN9++y0AoFWrVgbb58+fj/DwcADAzJkzoVar0bNnT6SkpKBDhw6YM2dOIZeUCIiJiUG/fv1w8+ZNlChRAvXq1cPWrVvRrl07AKyrZH9YZ02jUhRFsXYhiIiIiIiIbBnHOBEREREREeWBwYmIiIiIiCgPDE5ERERERER5YHAiIiIiIiLKA4MTERERERFRHhiciIiIiIiI8sDgRERERERElAcGJyIiIiIiojwwOBEREeWDSqXCmjVrrF0MIiIqZAxORERkN8LDw6FSqbJcOnbsaO2iERFREedo7QIQERHlR8eOHTF//nyDbS4uLlYqDRERFRdscSIiIrvi4uKCwMBAg0vJkiUBSDe6b7/9Fp06dYKbmxsqVaqEFStWGDz/+PHjePbZZ+Hm5obSpUvjrbfeQkJCgsE+P/30E2rXrg0XFxcEBQVh6NChBo/fuXMH3bt3h7u7O6pWrYp169ZZ9kUTEZHVMTgREVGRMnbsWPTs2RNHjx5F37598fLLL+PUqVMAgMTERHTo0AElS5bEP//8g+XLl+P33383CEbffvsthgwZgrfeegvHjx/HunXrUKVKFYNzTJw4ES+99BKOHTuGzp07o2/fvrh3716hvk4iIipcKkVRFGsXgoiIyBjh4eFYvHgxXF1dDbZ/8MEH+OCDD6BSqTBw4EB8++23useeeuopPPHEE5gzZw7mzZuH999/H1evXoWHhwcAYNOmTQgLC8ONGzcQEBCAMmXKYMCAAZgyZUq2ZVCpVPjoo48wefJkABLGPD09sXnzZo61IiIqwjjGiYiI7Err1q0NghEAlCpVSne7adOmBo81bdoUUVFRAIBTp04hNDRUF5oAoHnz5tBoNDhz5gxUKhVu3LiBNm3a5FqGevXq6W57eHjA29sbMTExpr4kIiKyAwxORERkVzw8PLJ0nTMXNzc3o/ZzcnIyuK9SqaDRaCxRJCIishEc40REREXK33//neV+zZo1AQA1a9bE0aNHkZiYqHt87969UKvVqF69Ory8vFChQgVs3769UMtMRES2jy1ORERkV1JSUhAdHW2wzdHREb6+vgCA5cuXo1GjRnj66afxyy+/4MCBA/jxxx8BAH379sX48ePRv39/TJgwAbdv38awYcPw6quvIiAgAAAwYcIEDBw4EP7+/ujUqRPi4+Oxd+9eDBs2rHBfKBER2RQGJyIisitbtmxBUFCQwbbq1avj9OnTAGTGu19//RWDBw9GUFAQli5dilq1agEA3N3dsXXrVgwfPhxPPvkk3N3d0bNnT8yYMUN3rP79+yM5ORkzZ87EqFGj4OvrixdeeKHwXiAREdkkzqpHRERFhkqlwurVq9GtWzdrF4WIiIoYjnEiIiIiIiLKA4MTERERERFRHjjGiYiIigz2PiciIkthixMREREREVEeGJyIiIiIiIjywOBERERERESUBwYnIiIiIiKiPDA4ERERERER5YHBiYiIiIiIKA8MTkRERERERHlgcCIiIiIiIsrD/wEuLJsDcIL/KgAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1000x500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, stop_ep+1), train_loss, label='Train Loss', color='blue')\n","plt.plot(range(1, stop_ep+1), val_loss, label='Val Loss', color='red')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, stop_ep+1), train_acc, label='Train Acc', color='blue')\n","plt.plot(range(1, stop_ep+1), val_acc, label='Val Acc', color='red')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":4,"id":"fa587175","metadata":{"execution":{"iopub.execute_input":"2025-04-25T03:39:31.092873Z","iopub.status.busy":"2025-04-25T03:39:31.092632Z","iopub.status.idle":"2025-04-25T03:39:31.097709Z","shell.execute_reply":"2025-04-25T03:39:31.097005Z"},"papermill":{"duration":0.01176,"end_time":"2025-04-25T03:39:31.098721","exception":false,"start_time":"2025-04-25T03:39:31.086961","status":"completed"},"tags":[]},"outputs":[],"source":["def test(model, test_loader, device):\n","    correct = 0\n","    total = 0\n","    test_loss = 0.0\n","    criterion = nn.CrossEntropyLoss()\n","    \n","    with torch.no_grad():\n","        for images, labels in test_loader:\n","            images, labels = images.to(device), labels.to(device)\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            test_loss += loss.item()\n","            \n","            _, predicted = torch.max(outputs, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","    \n","    test_accuracy = correct / total\n","    test_loss = test_loss / len(test_loader)\n","    \n","    print(f\"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}\")\n","    return test_loss, test_accuracy"]},{"cell_type":"code","execution_count":5,"id":"6d063474","metadata":{"execution":{"iopub.execute_input":"2025-04-25T03:39:31.10934Z","iopub.status.busy":"2025-04-25T03:39:31.109133Z","iopub.status.idle":"2025-04-25T03:39:36.127705Z","shell.execute_reply":"2025-04-25T03:39:36.126715Z"},"papermill":{"duration":5.025263,"end_time":"2025-04-25T03:39:36.128946","exception":false,"start_time":"2025-04-25T03:39:31.103683","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Test Loss: 0.1774, Test Accuracy: 0.8984\n"]}],"source":["test_path = '/kaggle/input/tuandat-data/radar_split_train_val_test/test'\n","\n","test_dataset = datasets.ImageFolder(root=test_path, transform=transforms)\n","test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False, num_workers=4)\n","model = torch.jit.load('/kaggle/working/22139012_22139015.pt', map_location=device)\n","model.eval()\n","test_loss, test_accuracy = test(model, test_loader, device)"]},{"cell_type":"code","execution_count":null,"id":"cdcbdd43","metadata":{"papermill":{"duration":0.005632,"end_time":"2025-04-25T03:39:36.140388","exception":false,"start_time":"2025-04-25T03:39:36.134756","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"datasetId":1608934,"sourceId":2645886,"sourceType":"datasetVersion"},{"datasetId":6901910,"sourceId":11074658,"sourceType":"datasetVersion"},{"datasetId":7187370,"sourceId":11469148,"sourceType":"datasetVersion"}],"dockerImageVersionId":31011,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.11"},"papermill":{"default_parameters":{},"duration":613.510713,"end_time":"2025-04-25T03:39:39.485889","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-04-25T03:29:25.975176","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}