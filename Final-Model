{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2645886,"sourceType":"datasetVersion","datasetId":1608934},{"sourceId":11074658,"sourceType":"datasetVersion","datasetId":6901910},{"sourceId":11469148,"sourceType":"datasetVersion","datasetId":7187370}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nguyenlamvydat/ai-classification?scriptVersionId=235974742\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import random_split\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms\nfrom torchsummary import summary\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:10:10.187637Z","iopub.execute_input":"2025-04-25T03:10:10.187976Z","iopub.status.idle":"2025-04-25T03:10:10.193323Z","shell.execute_reply.started":"2025-04-25T03:10:10.187951Z","shell.execute_reply":"2025-04-25T03:10:10.192559Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"#Data Processing\ntraining_path = '/kaggle/input/radar-signal-classification/training_set'\n\ntransforms = transforms.Compose([\n    transforms.Resize((128, 128)),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5,), (0.5,))\n])\nfull_dataset = datasets.ImageFolder(root=training_path, transform=transforms)\n\n# 80% data train, 20% valdilation\ntrain_size = int(0.8 * len(full_dataset))\nval_size = len(full_dataset) - train_size\ntrain_data, val_data = random_split(full_dataset, [train_size, val_size])\n\ntrain_loader = DataLoader(train_data, batch_size=32, shuffle=True, num_workers=2)\nval_loader = DataLoader(val_data, batch_size=32, shuffle=False, num_workers=2)\n\nclass_names = train_data.dataset.classes\nnum_classes = len(class_names)\n\nprint(f\"Classes: {class_names}\")\nprint(f\"Number of classes: {num_classes}\")\nprint(f\"Training samples: {train_size}, Validation samples: {val_size}\")\n\n#Build Neural Network\nclass ChannelAttention(nn.Module):\n    def __init__(self, in_channels, reduction_ratio=16):\n        super(ChannelAttention, self).__init__()\n        self.avg_pool = nn.AdaptiveAvgPool2d(1)\n        self.max_pool = nn.AdaptiveMaxPool2d(1)\n        \n        self.fc = nn.Sequential(\n            nn.Conv2d(in_channels, in_channels // reduction_ratio, kernel_size=1, bias=False),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(in_channels // reduction_ratio, in_channels, kernel_size=1, bias=False)\n        )\n        \n    def forward(self, x):\n        avg_out = self.fc(self.avg_pool(x))\n        max_out = self.fc(self.max_pool(x))\n        out = avg_out + max_out\n        return torch.sigmoid(out)\n\n\nclass SpatialAttention(nn.Module):\n    def __init__(self, kernel_size=7):\n        super(SpatialAttention, self).__init__()\n        self.conv = nn.Conv2d(2, 1, kernel_size=kernel_size, padding=kernel_size//2, bias=False)\n        \n    def forward(self, x):\n        avg_out = torch.mean(x, dim=1, keepdim=True)\n        max_out, _ = torch.max(x, dim=1, keepdim=True)\n        x_cat = torch.cat([avg_out, max_out], dim=1)\n        out = self.conv(x_cat)\n        return torch.sigmoid(out)\n\n        \nclass CBAM(nn.Module):\n    def __init__(self, in_channels, reduction_ratio=16, kernel_size=7):\n        super(CBAM, self).__init__()\n        self.channel_attention = ChannelAttention(in_channels, reduction_ratio)\n        self.spatial_attention = SpatialAttention(kernel_size)\n        \n    def forward(self, x):\n        \n        channel_att = self.channel_attention(x)\n        x = x * channel_att\n\n        spatial_att = self.spatial_attention(x)\n        x = x * spatial_att\n\n        return x\n\n        \nclass ConvBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, groups=1, stride=1):\n        super(ConvBlock, self).__init__()\n        self.block = nn.Sequential(\n            nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False),\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=stride, padding=1, groups=groups, bias=False),\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU(inplace=True)\n        )\n        \n    def forward(self, x):\n        return self.block(x)\n\n        \nclass ResidualCBAM(nn.Module):\n    def __init__(self, in_channels, out_channels, groups=1, stride=1):\n        super(ResidualCBAM, self).__init__()\n        self.stride = stride\n        \n        self.conv_block = nn.Sequential(\n            nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False),\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=stride, padding=1, groups=groups, bias=False),\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(out_channels, out_channels, kernel_size=1, bias=False),\n            nn.BatchNorm2d(out_channels)\n        )\n        self.dropout = nn.Dropout(0.3)\n        self.cbam = CBAM(out_channels, reduction_ratio=8)\n\n        if stride != 1 or in_channels != out_channels:\n            self.shortcut = nn.Sequential(\n                nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(out_channels)\n            )\n        else:\n            self.shortcut = nn.Identity()\n\n        \n    def forward(self, x):\n        ResidualCBAM = self.shortcut(x)\n        x = self.conv_block(x)\n        x = self.cbam(x)\n        x = self.dropout(x)\n        x += ResidualCBAM\n        return F.relu(x)\n\n\nclass MultiScaleModule(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super(MultiScaleModule, self).__init__()\n\n        self.h_pool = nn.AdaptiveAvgPool2d((1, None))\n        self.h_conv = nn.Conv2d(in_channels, out_channels//2, kernel_size=(1, 3), padding=(0, 1), bias=False)\n        \n        self.v_pool = nn.AdaptiveAvgPool2d((None, 1))\n        self.v_conv = nn.Conv2d(in_channels, out_channels//2, kernel_size=(3, 1), padding=(1, 0), bias=False)\n        \n        self.sigmoid = nn.Sigmoid()\n        \n    def forward(self, x):\n        h_att = self.h_conv(self.h_pool(x))\n        v_att = self.v_conv(self.v_pool(x))\n        \n        h_att = F.interpolate(h_att, size=x.size()[2:], mode='bilinear', align_corners=False)\n        v_att = F.interpolate(v_att, size=x.size()[2:], mode='bilinear', align_corners=False)\n        \n        attention = torch.cat([h_att, v_att], dim=1)\n        attention = self.sigmoid(attention)\n        \n        return x * attention\n\nclass RadarSignalNW(nn.Module):\n    def __init__(self, in_channels=3, num_classes=8):\n        super(RadarSignalNW, self).__init__()\n        \n        self.conv1 = nn.Conv2d(in_channels, 32, kernel_size=3, stride=2, padding=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(32)\n        self.relu = nn.ReLU(inplace=True)\n        \n        # 64x64\n        self.Block1 = nn.Sequential(\n            ResidualCBAM(32, 32, groups=2),\n            ResidualCBAM(32, 32, groups=2)\n        )\n        self.msm1 = MultiScaleModule(32, 32)\n        self.transition1 = nn.Conv2d(32, 64, kernel_size=1, stride=2, bias=False)\n        \n        # 32x32\n        self.Block2 = nn.Sequential(\n            ResidualCBAM(64, 64, groups=4),\n            ResidualCBAM(64, 64, groups=4)\n        )\n        self.msm2 = MultiScaleModule(64, 64)\n        self.transition2 = nn.Conv2d(64, 128, kernel_size=1, stride=2, bias=False)\n        \n        # 16x16\n        self.Block3 = nn.Sequential(\n            ResidualCBAM(128, 128, groups=8),\n            ResidualCBAM(128, 128, groups=8)\n        )\n        self.msm3 = MultiScaleModule(128, 128)\n        \n  \n        self.global_pool = nn.AdaptiveAvgPool2d(1)\n        self.fc1 = nn.Linear(128, 64)\n        self.dropout = nn.Dropout(0.3)\n        self.fc2 = nn.Linear(64, num_classes)\n    \n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.relu(x)\n\n        x = self.Block1(x)\n        x = self.msm1(x)\n        x = self.transition1(x)\n        \n        x = self.Block2(x)\n        x = self.msm2(x)\n        x = self.transition2(x)\n       \n        x = self.Block3(x)\n        x = self.msm3(x)\n        \n        x = self.global_pool(x)\n        x = x.view(x.size(0), -1)\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.dropout(x)\n        x = self.fc2(x)\n        \n        return x\n    \nmodel = RadarSignalNW(num_classes=8).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.0005, weight_decay=1e-4)\nscheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.2, patience=10)\nsummary(model, input_size=(3, 128, 128))\n\ndef train(model, train_loader, val_loader, optimizer, criterion, scheduler, epochs, device, early_stopping_patience=10):\n    train_loss, val_loss, train_acc, val_acc = [], [], [], []\n    \n    save_path = \"/kaggle/working/22139012_22139015.pt\"\n    \n    best_val_acc = 0.0\n    best_val_loss = float('inf')\n    epochs_no_improve = 0\n    \n    for epoch in range(epochs):\n        model.train()\n        running_loss, correct, total = 0.0, 0, 0\n        for batch_idx, (images, labels) in enumerate(train_loader):\n            images, labels = images.to(device), labels.to(device)\n            optimizer.zero_grad()\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            \n            running_loss += loss.item()\n            _, predicted = torch.max(outputs, 1)\n            correct += (predicted == labels).sum().item()\n            total += labels.size(0)\n        \n        epoch_train_loss = running_loss / len(train_loader)\n        epoch_train_acc = correct / total\n        train_loss.append(epoch_train_loss)\n        train_acc.append(epoch_train_acc)\n        \n        model.eval()\n        val_running_loss, correct, total = 0.0, 0, 0\n        with torch.no_grad():\n            for images, labels in val_loader:\n                images, labels = images.to(device), labels.to(device)\n                outputs = model(images)\n                loss = criterion(outputs, labels)\n                val_running_loss += loss.item()\n                _, predicted = torch.max(outputs, 1)\n                correct += (predicted == labels).sum().item()\n                total += labels.size(0)\n        \n        epoch_val_loss = val_running_loss / len(val_loader)\n        epoch_val_acc = correct / total\n        val_loss.append(epoch_val_loss)\n        val_acc.append(epoch_val_acc)\n        \n        scheduler.step(epoch_val_loss)\n        \n        current_lr = optimizer.param_groups[0]['lr']\n        print(f\"Epoch {epoch+1}/{epochs} - \"\n              f\"Train Loss: {epoch_train_loss:.4f}, Train Acc: {epoch_train_acc:.4f} - \"\n              f\"Val Loss: {epoch_val_loss:.4f}, Val Acc: {epoch_val_acc:.4f} - \"\n              f\"LR: {current_lr:.6f}\")\n        \n        if epoch_val_acc > best_val_acc:\n            best_val_acc = epoch_val_acc\n            best_val_loss = epoch_val_loss\n            example_input = torch.randn(1, 3, 128, 128).to(device) \n            traced_model = torch.jit.trace(model, example_input)\n            traced_model.save(save_path)\n            print('\\t\\t\\t---------------------------------------------------------')\n            print(f\"\\t\\t\\t Saved best model at epoch {epoch+1} with Val Acc: {best_val_acc:.4f}\")\n            print('\\t\\t\\t---------------------------------------------------------')\n            epochs_no_improve = 0\n        else:\n            epochs_no_improve += 1\n        \n        if epochs_no_improve >= early_stopping_patience:\n            print(f\"Early stopping triggered after {epoch+1} epochs with no improvement in Val Acc.\")\n            break\n    \n    return model, train_loss, train_acc, val_loss, val_acc, epoch+1\n\nepochs = 100\nmodel, train_loss, train_acc, val_loss, val_acc, stop_ep = train(model, train_loader, val_loader, optimizer, criterion, scheduler, epochs, device, early_stopping_patience=10)\n\nprint(\"Training completed. Best model save!\")","metadata":{"execution":{"iopub.status.busy":"2025-04-25T03:10:10.306523Z","iopub.execute_input":"2025-04-25T03:10:10.306804Z","iopub.status.idle":"2025-04-25T03:24:03.157377Z","shell.execute_reply.started":"2025-04-25T03:10:10.306783Z","shell.execute_reply":"2025-04-25T03:24:03.155321Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Classes: ['B-FM', 'Barker', 'CPFSK', 'DSB-AM', 'GFSK', 'LFM', 'Rect', 'SSB-AM']\nNumber of classes: 8\nTraining samples: 5120, Validation samples: 1280\n----------------------------------------------------------------\n        Layer (type)               Output Shape         Param #\n================================================================\n            Conv2d-1           [-1, 32, 64, 64]             864\n       BatchNorm2d-2           [-1, 32, 64, 64]              64\n              ReLU-3           [-1, 32, 64, 64]               0\n          Identity-4           [-1, 32, 64, 64]               0\n            Conv2d-5           [-1, 32, 64, 64]           1,024\n       BatchNorm2d-6           [-1, 32, 64, 64]              64\n              ReLU-7           [-1, 32, 64, 64]               0\n            Conv2d-8           [-1, 32, 64, 64]           4,608\n       BatchNorm2d-9           [-1, 32, 64, 64]              64\n             ReLU-10           [-1, 32, 64, 64]               0\n           Conv2d-11           [-1, 32, 64, 64]           1,024\n      BatchNorm2d-12           [-1, 32, 64, 64]              64\nAdaptiveAvgPool2d-13             [-1, 32, 1, 1]               0\n           Conv2d-14              [-1, 4, 1, 1]             128\n             ReLU-15              [-1, 4, 1, 1]               0\n           Conv2d-16             [-1, 32, 1, 1]             128\nAdaptiveMaxPool2d-17             [-1, 32, 1, 1]               0\n           Conv2d-18              [-1, 4, 1, 1]             128\n             ReLU-19              [-1, 4, 1, 1]               0\n           Conv2d-20             [-1, 32, 1, 1]             128\n ChannelAttention-21             [-1, 32, 1, 1]               0\n           Conv2d-22            [-1, 1, 64, 64]              98\n SpatialAttention-23            [-1, 1, 64, 64]               0\n             CBAM-24           [-1, 32, 64, 64]               0\n          Dropout-25           [-1, 32, 64, 64]               0\n     ResidualCBAM-26           [-1, 32, 64, 64]               0\n         Identity-27           [-1, 32, 64, 64]               0\n           Conv2d-28           [-1, 32, 64, 64]           1,024\n      BatchNorm2d-29           [-1, 32, 64, 64]              64\n             ReLU-30           [-1, 32, 64, 64]               0\n           Conv2d-31           [-1, 32, 64, 64]           4,608\n      BatchNorm2d-32           [-1, 32, 64, 64]              64\n             ReLU-33           [-1, 32, 64, 64]               0\n           Conv2d-34           [-1, 32, 64, 64]           1,024\n      BatchNorm2d-35           [-1, 32, 64, 64]              64\nAdaptiveAvgPool2d-36             [-1, 32, 1, 1]               0\n           Conv2d-37              [-1, 4, 1, 1]             128\n             ReLU-38              [-1, 4, 1, 1]               0\n           Conv2d-39             [-1, 32, 1, 1]             128\nAdaptiveMaxPool2d-40             [-1, 32, 1, 1]               0\n           Conv2d-41              [-1, 4, 1, 1]             128\n             ReLU-42              [-1, 4, 1, 1]               0\n           Conv2d-43             [-1, 32, 1, 1]             128\n ChannelAttention-44             [-1, 32, 1, 1]               0\n           Conv2d-45            [-1, 1, 64, 64]              98\n SpatialAttention-46            [-1, 1, 64, 64]               0\n             CBAM-47           [-1, 32, 64, 64]               0\n          Dropout-48           [-1, 32, 64, 64]               0\n     ResidualCBAM-49           [-1, 32, 64, 64]               0\nAdaptiveAvgPool2d-50            [-1, 32, 1, 64]               0\n           Conv2d-51            [-1, 16, 1, 64]           1,536\nAdaptiveAvgPool2d-52            [-1, 32, 64, 1]               0\n           Conv2d-53            [-1, 16, 64, 1]           1,536\n          Sigmoid-54           [-1, 32, 64, 64]               0\n MultiScaleModule-55           [-1, 32, 64, 64]               0\n           Conv2d-56           [-1, 64, 32, 32]           2,048\n         Identity-57           [-1, 64, 32, 32]               0\n           Conv2d-58           [-1, 64, 32, 32]           4,096\n      BatchNorm2d-59           [-1, 64, 32, 32]             128\n             ReLU-60           [-1, 64, 32, 32]               0\n           Conv2d-61           [-1, 64, 32, 32]           9,216\n      BatchNorm2d-62           [-1, 64, 32, 32]             128\n             ReLU-63           [-1, 64, 32, 32]               0\n           Conv2d-64           [-1, 64, 32, 32]           4,096\n      BatchNorm2d-65           [-1, 64, 32, 32]             128\nAdaptiveAvgPool2d-66             [-1, 64, 1, 1]               0\n           Conv2d-67              [-1, 8, 1, 1]             512\n             ReLU-68              [-1, 8, 1, 1]               0\n           Conv2d-69             [-1, 64, 1, 1]             512\nAdaptiveMaxPool2d-70             [-1, 64, 1, 1]               0\n           Conv2d-71              [-1, 8, 1, 1]             512\n             ReLU-72              [-1, 8, 1, 1]               0\n           Conv2d-73             [-1, 64, 1, 1]             512\n ChannelAttention-74             [-1, 64, 1, 1]               0\n           Conv2d-75            [-1, 1, 32, 32]              98\n SpatialAttention-76            [-1, 1, 32, 32]               0\n             CBAM-77           [-1, 64, 32, 32]               0\n          Dropout-78           [-1, 64, 32, 32]               0\n     ResidualCBAM-79           [-1, 64, 32, 32]               0\n         Identity-80           [-1, 64, 32, 32]               0\n           Conv2d-81           [-1, 64, 32, 32]           4,096\n      BatchNorm2d-82           [-1, 64, 32, 32]             128\n             ReLU-83           [-1, 64, 32, 32]               0\n           Conv2d-84           [-1, 64, 32, 32]           9,216\n      BatchNorm2d-85           [-1, 64, 32, 32]             128\n             ReLU-86           [-1, 64, 32, 32]               0\n           Conv2d-87           [-1, 64, 32, 32]           4,096\n      BatchNorm2d-88           [-1, 64, 32, 32]             128\nAdaptiveAvgPool2d-89             [-1, 64, 1, 1]               0\n           Conv2d-90              [-1, 8, 1, 1]             512\n             ReLU-91              [-1, 8, 1, 1]               0\n           Conv2d-92             [-1, 64, 1, 1]             512\nAdaptiveMaxPool2d-93             [-1, 64, 1, 1]               0\n           Conv2d-94              [-1, 8, 1, 1]             512\n             ReLU-95              [-1, 8, 1, 1]               0\n           Conv2d-96             [-1, 64, 1, 1]             512\n ChannelAttention-97             [-1, 64, 1, 1]               0\n           Conv2d-98            [-1, 1, 32, 32]              98\n SpatialAttention-99            [-1, 1, 32, 32]               0\n            CBAM-100           [-1, 64, 32, 32]               0\n         Dropout-101           [-1, 64, 32, 32]               0\n    ResidualCBAM-102           [-1, 64, 32, 32]               0\nAdaptiveAvgPool2d-103            [-1, 64, 1, 32]               0\n          Conv2d-104            [-1, 32, 1, 32]           6,144\nAdaptiveAvgPool2d-105            [-1, 64, 32, 1]               0\n          Conv2d-106            [-1, 32, 32, 1]           6,144\n         Sigmoid-107           [-1, 64, 32, 32]               0\nMultiScaleModule-108           [-1, 64, 32, 32]               0\n          Conv2d-109          [-1, 128, 16, 16]           8,192\n        Identity-110          [-1, 128, 16, 16]               0\n          Conv2d-111          [-1, 128, 16, 16]          16,384\n     BatchNorm2d-112          [-1, 128, 16, 16]             256\n            ReLU-113          [-1, 128, 16, 16]               0\n          Conv2d-114          [-1, 128, 16, 16]          18,432\n     BatchNorm2d-115          [-1, 128, 16, 16]             256\n            ReLU-116          [-1, 128, 16, 16]               0\n          Conv2d-117          [-1, 128, 16, 16]          16,384\n     BatchNorm2d-118          [-1, 128, 16, 16]             256\nAdaptiveAvgPool2d-119            [-1, 128, 1, 1]               0\n          Conv2d-120             [-1, 16, 1, 1]           2,048\n            ReLU-121             [-1, 16, 1, 1]               0\n          Conv2d-122            [-1, 128, 1, 1]           2,048\nAdaptiveMaxPool2d-123            [-1, 128, 1, 1]               0\n          Conv2d-124             [-1, 16, 1, 1]           2,048\n            ReLU-125             [-1, 16, 1, 1]               0\n          Conv2d-126            [-1, 128, 1, 1]           2,048\nChannelAttention-127            [-1, 128, 1, 1]               0\n          Conv2d-128            [-1, 1, 16, 16]              98\nSpatialAttention-129            [-1, 1, 16, 16]               0\n            CBAM-130          [-1, 128, 16, 16]               0\n         Dropout-131          [-1, 128, 16, 16]               0\n    ResidualCBAM-132          [-1, 128, 16, 16]               0\n        Identity-133          [-1, 128, 16, 16]               0\n          Conv2d-134          [-1, 128, 16, 16]          16,384\n     BatchNorm2d-135          [-1, 128, 16, 16]             256\n            ReLU-136          [-1, 128, 16, 16]               0\n          Conv2d-137          [-1, 128, 16, 16]          18,432\n     BatchNorm2d-138          [-1, 128, 16, 16]             256\n            ReLU-139          [-1, 128, 16, 16]               0\n          Conv2d-140          [-1, 128, 16, 16]          16,384\n     BatchNorm2d-141          [-1, 128, 16, 16]             256\nAdaptiveAvgPool2d-142            [-1, 128, 1, 1]               0\n          Conv2d-143             [-1, 16, 1, 1]           2,048\n            ReLU-144             [-1, 16, 1, 1]               0\n          Conv2d-145            [-1, 128, 1, 1]           2,048\nAdaptiveMaxPool2d-146            [-1, 128, 1, 1]               0\n          Conv2d-147             [-1, 16, 1, 1]           2,048\n            ReLU-148             [-1, 16, 1, 1]               0\n          Conv2d-149            [-1, 128, 1, 1]           2,048\nChannelAttention-150            [-1, 128, 1, 1]               0\n          Conv2d-151            [-1, 1, 16, 16]              98\nSpatialAttention-152            [-1, 1, 16, 16]               0\n            CBAM-153          [-1, 128, 16, 16]               0\n         Dropout-154          [-1, 128, 16, 16]               0\n    ResidualCBAM-155          [-1, 128, 16, 16]               0\nAdaptiveAvgPool2d-156           [-1, 128, 1, 16]               0\n          Conv2d-157            [-1, 64, 1, 16]          24,576\nAdaptiveAvgPool2d-158           [-1, 128, 16, 1]               0\n          Conv2d-159            [-1, 64, 16, 1]          24,576\n         Sigmoid-160          [-1, 128, 16, 16]               0\nMultiScaleModule-161          [-1, 128, 16, 16]               0\nAdaptiveAvgPool2d-162            [-1, 128, 1, 1]               0\n          Linear-163                   [-1, 64]           8,256\n            ReLU-164                   [-1, 64]               0\n         Dropout-165                   [-1, 64]               0\n          Linear-166                    [-1, 8]             520\n================================================================\nTotal params: 259,764\nTrainable params: 259,764\nNon-trainable params: 0\n----------------------------------------------------------------\nInput size (MB): 0.19\nForward/backward pass size (MB): 49.58\nParams size (MB): 0.99\nEstimated Total Size (MB): 50.75\n----------------------------------------------------------------\nEpoch 1/100 - Train Loss: 1.4537, Train Acc: 0.4184 - Val Loss: 0.9687, Val Acc: 0.5523 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 1 with Val Acc: 0.5523\n\t\t\t---------------------------------------------------------\nEpoch 2/100 - Train Loss: 0.7943, Train Acc: 0.6607 - Val Loss: 0.5409, Val Acc: 0.7641 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 2 with Val Acc: 0.7641\n\t\t\t---------------------------------------------------------\nEpoch 3/100 - Train Loss: 0.5393, Train Acc: 0.7676 - Val Loss: 0.4360, Val Acc: 0.7836 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 3 with Val Acc: 0.7836\n\t\t\t---------------------------------------------------------\nEpoch 4/100 - Train Loss: 0.4661, Train Acc: 0.7951 - Val Loss: 0.4762, Val Acc: 0.7648 - LR: 0.000500\nEpoch 5/100 - Train Loss: 0.4173, Train Acc: 0.8102 - Val Loss: 0.3719, Val Acc: 0.8313 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 5 with Val Acc: 0.8313\n\t\t\t---------------------------------------------------------\nEpoch 6/100 - Train Loss: 0.3714, Train Acc: 0.8277 - Val Loss: 0.3076, Val Acc: 0.8461 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 6 with Val Acc: 0.8461\n\t\t\t---------------------------------------------------------\nEpoch 7/100 - Train Loss: 0.3582, Train Acc: 0.8287 - Val Loss: 0.3578, Val Acc: 0.8281 - LR: 0.000500\nEpoch 8/100 - Train Loss: 0.3431, Train Acc: 0.8400 - Val Loss: 0.2916, Val Acc: 0.8516 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 8 with Val Acc: 0.8516\n\t\t\t---------------------------------------------------------\nEpoch 9/100 - Train Loss: 0.3128, Train Acc: 0.8467 - Val Loss: 0.3072, Val Acc: 0.8523 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 9 with Val Acc: 0.8523\n\t\t\t---------------------------------------------------------\nEpoch 10/100 - Train Loss: 0.3212, Train Acc: 0.8492 - Val Loss: 0.2799, Val Acc: 0.8641 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 10 with Val Acc: 0.8641\n\t\t\t---------------------------------------------------------\nEpoch 11/100 - Train Loss: 0.3033, Train Acc: 0.8527 - Val Loss: 0.2861, Val Acc: 0.8602 - LR: 0.000500\nEpoch 12/100 - Train Loss: 0.3031, Train Acc: 0.8553 - Val Loss: 0.2907, Val Acc: 0.8609 - LR: 0.000500\nEpoch 13/100 - Train Loss: 0.2868, Train Acc: 0.8561 - Val Loss: 0.2626, Val Acc: 0.8641 - LR: 0.000500\nEpoch 14/100 - Train Loss: 0.2772, Train Acc: 0.8637 - Val Loss: 0.2928, Val Acc: 0.8555 - LR: 0.000500\nEpoch 15/100 - Train Loss: 0.2649, Train Acc: 0.8719 - Val Loss: 0.5222, Val Acc: 0.8141 - LR: 0.000500\nEpoch 16/100 - Train Loss: 0.2865, Train Acc: 0.8592 - Val Loss: 0.3962, Val Acc: 0.8156 - LR: 0.000500\nEpoch 17/100 - Train Loss: 0.2658, Train Acc: 0.8723 - Val Loss: 0.2863, Val Acc: 0.8562 - LR: 0.000500\nEpoch 18/100 - Train Loss: 0.2708, Train Acc: 0.8637 - Val Loss: 0.2746, Val Acc: 0.8664 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 18 with Val Acc: 0.8664\n\t\t\t---------------------------------------------------------\nEpoch 19/100 - Train Loss: 0.2594, Train Acc: 0.8711 - Val Loss: 0.2657, Val Acc: 0.8617 - LR: 0.000500\nEpoch 20/100 - Train Loss: 0.2580, Train Acc: 0.8727 - Val Loss: 0.2664, Val Acc: 0.8719 - LR: 0.000500\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 20 with Val Acc: 0.8719\n\t\t\t---------------------------------------------------------\nEpoch 21/100 - Train Loss: 0.2578, Train Acc: 0.8756 - Val Loss: 0.3072, Val Acc: 0.8609 - LR: 0.000500\nEpoch 22/100 - Train Loss: 0.2507, Train Acc: 0.8688 - Val Loss: 0.2786, Val Acc: 0.8703 - LR: 0.000500\nEpoch 23/100 - Train Loss: 0.2472, Train Acc: 0.8738 - Val Loss: 0.2735, Val Acc: 0.8688 - LR: 0.000500\nEpoch 24/100 - Train Loss: 0.2341, Train Acc: 0.8812 - Val Loss: 0.2638, Val Acc: 0.8711 - LR: 0.000100\nEpoch 25/100 - Train Loss: 0.2059, Train Acc: 0.8934 - Val Loss: 0.2743, Val Acc: 0.8789 - LR: 0.000100\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 25 with Val Acc: 0.8789\n\t\t\t---------------------------------------------------------\nEpoch 26/100 - Train Loss: 0.1965, Train Acc: 0.8971 - Val Loss: 0.2748, Val Acc: 0.8703 - LR: 0.000100\nEpoch 27/100 - Train Loss: 0.1906, Train Acc: 0.9021 - Val Loss: 0.2810, Val Acc: 0.8711 - LR: 0.000100\nEpoch 28/100 - Train Loss: 0.1864, Train Acc: 0.9021 - Val Loss: 0.2754, Val Acc: 0.8766 - LR: 0.000100\nEpoch 29/100 - Train Loss: 0.1874, Train Acc: 0.9029 - Val Loss: 0.2750, Val Acc: 0.8797 - LR: 0.000100\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 29 with Val Acc: 0.8797\n\t\t\t---------------------------------------------------------\nEpoch 30/100 - Train Loss: 0.1821, Train Acc: 0.9025 - Val Loss: 0.2648, Val Acc: 0.8797 - LR: 0.000100\nEpoch 31/100 - Train Loss: 0.1779, Train Acc: 0.9086 - Val Loss: 0.2800, Val Acc: 0.8773 - LR: 0.000100\nEpoch 32/100 - Train Loss: 0.1800, Train Acc: 0.9027 - Val Loss: 0.2752, Val Acc: 0.8805 - LR: 0.000100\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 32 with Val Acc: 0.8805\n\t\t\t---------------------------------------------------------\nEpoch 33/100 - Train Loss: 0.1848, Train Acc: 0.8967 - Val Loss: 0.2711, Val Acc: 0.8711 - LR: 0.000100\nEpoch 34/100 - Train Loss: 0.1803, Train Acc: 0.9035 - Val Loss: 0.2799, Val Acc: 0.8805 - LR: 0.000100\nEpoch 35/100 - Train Loss: 0.1764, Train Acc: 0.9084 - Val Loss: 0.3113, Val Acc: 0.8742 - LR: 0.000020\nEpoch 36/100 - Train Loss: 0.1681, Train Acc: 0.9139 - Val Loss: 0.2857, Val Acc: 0.8750 - LR: 0.000020\nEpoch 37/100 - Train Loss: 0.1598, Train Acc: 0.9109 - Val Loss: 0.2866, Val Acc: 0.8773 - LR: 0.000020\nEpoch 38/100 - Train Loss: 0.1635, Train Acc: 0.9135 - Val Loss: 0.2764, Val Acc: 0.8773 - LR: 0.000020\nEpoch 39/100 - Train Loss: 0.1573, Train Acc: 0.9160 - Val Loss: 0.2830, Val Acc: 0.8781 - LR: 0.000020\nEpoch 40/100 - Train Loss: 0.1650, Train Acc: 0.9086 - Val Loss: 0.2865, Val Acc: 0.8773 - LR: 0.000020\nEpoch 41/100 - Train Loss: 0.1636, Train Acc: 0.9139 - Val Loss: 0.2888, Val Acc: 0.8789 - LR: 0.000020\nEpoch 42/100 - Train Loss: 0.1637, Train Acc: 0.9090 - Val Loss: 0.2761, Val Acc: 0.8820 - LR: 0.000020\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 42 with Val Acc: 0.8820\n\t\t\t---------------------------------------------------------\nEpoch 43/100 - Train Loss: 0.1589, Train Acc: 0.9166 - Val Loss: 0.2911, Val Acc: 0.8773 - LR: 0.000020\nEpoch 44/100 - Train Loss: 0.1566, Train Acc: 0.9158 - Val Loss: 0.2942, Val Acc: 0.8789 - LR: 0.000020\nEpoch 45/100 - Train Loss: 0.1571, Train Acc: 0.9137 - Val Loss: 0.2782, Val Acc: 0.8812 - LR: 0.000020\nEpoch 46/100 - Train Loss: 0.1605, Train Acc: 0.9131 - Val Loss: 0.2863, Val Acc: 0.8758 - LR: 0.000004\nEpoch 47/100 - Train Loss: 0.1563, Train Acc: 0.9160 - Val Loss: 0.2885, Val Acc: 0.8773 - LR: 0.000004\nEpoch 48/100 - Train Loss: 0.1569, Train Acc: 0.9141 - Val Loss: 0.2901, Val Acc: 0.8742 - LR: 0.000004\nEpoch 49/100 - Train Loss: 0.1551, Train Acc: 0.9199 - Val Loss: 0.2803, Val Acc: 0.8852 - LR: 0.000004\n\t\t\t---------------------------------------------------------\n\t\t\t Saved best model at epoch 49 with Val Acc: 0.8852\n\t\t\t---------------------------------------------------------\nEpoch 50/100 - Train Loss: 0.1519, Train Acc: 0.9180 - Val Loss: 0.2889, Val Acc: 0.8805 - LR: 0.000004\nEpoch 51/100 - Train Loss: 0.1584, Train Acc: 0.9199 - Val Loss: 0.2852, Val Acc: 0.8812 - LR: 0.000004\nEpoch 52/100 - Train Loss: 0.1585, Train Acc: 0.9135 - Val Loss: 0.2827, Val Acc: 0.8820 - LR: 0.000004\nEpoch 53/100 - Train Loss: 0.1535, Train Acc: 0.9182 - Val Loss: 0.2876, Val Acc: 0.8836 - LR: 0.000004\nEpoch 54/100 - Train Loss: 0.1520, Train Acc: 0.9201 - Val Loss: 0.2929, Val Acc: 0.8812 - LR: 0.000004\nEpoch 55/100 - Train Loss: 0.1521, Train Acc: 0.9201 - Val Loss: 0.2947, Val Acc: 0.8812 - LR: 0.000004\nEpoch 56/100 - Train Loss: 0.1529, Train Acc: 0.9137 - Val Loss: 0.2953, Val Acc: 0.8766 - LR: 0.000004\nEpoch 57/100 - Train Loss: 0.1577, Train Acc: 0.9168 - Val Loss: 0.2873, Val Acc: 0.8812 - LR: 0.000001\nEpoch 58/100 - Train Loss: 0.1515, Train Acc: 0.9195 - Val Loss: 0.2910, Val Acc: 0.8812 - LR: 0.000001\nEpoch 59/100 - Train Loss: 0.1549, Train Acc: 0.9162 - Val Loss: 0.2847, Val Acc: 0.8820 - LR: 0.000001\nEarly stopping triggered after 59 epochs with no improvement in Val Acc.\nTraining completed. Best model save!\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 5))\nplt.plot(range(1, stop_ep+1), train_loss, label='Train Loss', color='blue')\nplt.plot(range(1, stop_ep+1), val_loss, label='Val Loss', color='red')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\nplt.grid(True)\nplt.show()\n\nplt.figure(figsize=(10, 5))\nplt.plot(range(1, stop_ep+1), train_acc, label='Train Acc', color='blue')\nplt.plot(range(1, stop_ep+1), val_acc, label='Val Acc', color='red')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:24:03.159218Z","iopub.execute_input":"2025-04-25T03:24:03.159544Z","iopub.status.idle":"2025-04-25T03:24:03.507618Z","shell.execute_reply.started":"2025-04-25T03:24:03.15951Z","shell.execute_reply":"2025-04-25T03:24:03.50695Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"def test(model, test_loader, device):\n    correct = 0\n    total = 0\n    test_loss = 0.0\n    criterion = nn.CrossEntropyLoss()\n    \n    with torch.no_grad():\n        for images, labels in test_loader:\n            images, labels = images.to(device), labels.to(device)\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n            test_loss += loss.item()\n            \n            _, predicted = torch.max(outputs, 1)\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n    \n    test_accuracy = correct / total\n    test_loss = test_loss / len(test_loader)\n    \n    print(f\"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}\")\n    return test_loss, test_accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:24:03.508441Z","iopub.execute_input":"2025-04-25T03:24:03.508906Z","iopub.status.idle":"2025-04-25T03:24:03.514495Z","shell.execute_reply.started":"2025-04-25T03:24:03.5087Z","shell.execute_reply":"2025-04-25T03:24:03.51388Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"test_path = '/kaggle/input/tuandat-data/radar_split_train_val_test/test'\n\ntest_dataset = datasets.ImageFolder(root=test_path, transform=transforms)\ntest_loader = DataLoader(test_dataset, batch_size=64, shuffle=False, num_workers=4)\nmodel = torch.jit.load('/kaggle/working/22139012_22139015.pt', map_location=device)\nmodel.eval()\ntest_loss, test_accuracy = test(model, test_loader, device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T03:24:03.515224Z","iopub.execute_input":"2025-04-25T03:24:03.515512Z","iopub.status.idle":"2025-04-25T03:24:06.255438Z","shell.execute_reply.started":"2025-04-25T03:24:03.515495Z","shell.execute_reply":"2025-04-25T03:24:06.254587Z"}},"outputs":[{"name":"stdout","text":"Test Loss: 0.1840, Test Accuracy: 0.9219\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}